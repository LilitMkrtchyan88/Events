package android.lilit.events.Pages;

import android.app.Activity;
import android.lilit.events.MD5;
import android.lilit.events.R;
import android.lilit.events.SendEmailInBackground;
import android.lilit.events.apiservices.ApiServiceCheckUsernameAvailability;
import android.lilit.events.apiservices.ApiServiceUserUpdateNewAutogeneratedPassword_ForgotPassword;
import android.lilit.events.clients.ApiClient;
import android.lilit.events.models.RegistrationLoginUpdateUserResponseModel;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class UpdateForgotPasswordPage extends Activity {

    private EditText forgotPasswordPageSendEmail_et;
    private Button forgotPasswordPageSendEmail_btn;
    private TextView forgotPasswordPageSendEmailRegularExpression_tv, hintUserUpdateForgotPassword_tv;
    private String textEmail_forgotPassword;
    //private String forgotPasswordPageSendEmail;
    //private String autogeneratedNewPassword;

    private int length_updateForgotPassword = 6;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.update_forgot_password_layout);

        forgotPasswordPageSendEmail_et=(EditText)findViewById(R.id.forgotPasswordPageSendEmail_et);
        forgotPasswordPageSendEmailRegularExpression_tv = (TextView)findViewById(R.id.forgotPasswordPageSendEmailRegularExpression_tv);
        hintUserUpdateForgotPassword_tv = (TextView)findViewById(R.id.hintUserUpdateForgotPassword_tv);

//get email address of fild email from MainActivity, the name of extra data is forgotPasswordEmail
        Bundle b = getIntent().getExtras();
        if (b!=null){
            forgotPasswordPageSendEmail_et.setText(b.getString("forgotPasswordUsername"));
        }

    }

    /*onclick */
    public void sendEmailForgotPasswordPage(View view) {

        String forgotPasswordPageSendEmail = forgotPasswordPageSendEmail_et.getText().toString();
        String autogeneratedNewPassword = getRandomPassword(length_updateForgotPassword);

        if (!testEmail(forgotPasswordPageSendEmail)){
            //naev stugel tesnel Tvyalneռi bazayum nman mail ka te che
            forgotPasswordPageSendEmail_et.setBackgroundColor(getResources().getColor(R.color.colorRose));
            forgotPasswordPageSendEmailRegularExpression_tv.setVisibility(View.VISIBLE);
            hintUserUpdateForgotPassword_tv.setVisibility(View.INVISIBLE);
        }
        else {
            forgotPasswordPageSendEmail_et.setBackgroundColor(getResources().getColor(R.color.colorBlue));
            forgotPasswordPageSendEmailRegularExpression_tv.setVisibility(View.INVISIBLE);

            checkUsernameInDB();


            //changUserData(forgotPasswordPageSendEmail, MD5.md5Custom(autogeneratedNewPassword), autogeneratedNewPassword);

            hintUserUpdateForgotPassword_tv.setVisibility(View.VISIBLE);
            hintUserUpdateForgotPassword_tv.setText("Ստուգել սույն էլ․ հասցեն, մեկանգամյա օգտագործման գաղտնաբառը տեսնելու համար");
        }
    }

    /*onclick */
    public void closeForgotPasswordPage(View view) {
        this.finish();
    }

    /*  this method used to send user updatable data to server or our local server
     *   @param username
     *   @param password */
    public void changUserData(final String username, String password_MD5, final String autogeneratedPassword){
        //final ProgressDialog progressDialog = ProgressDialog.show(UpdateForgotPassword_User.this, null, "Sending mail", true, false);

        ApiServiceUserUpdateNewAutogeneratedPassword_ForgotPassword apiService = ApiClient.getClient().create(ApiServiceUserUpdateNewAutogeneratedPassword_ForgotPassword.class);
        Call<RegistrationLoginUpdateUserResponseModel> call = apiService.updateUserData(username, password_MD5);
        call.enqueue(new Callback<RegistrationLoginUpdateUserResponseModel>() {
            @Override
            public void onResponse(Call<RegistrationLoginUpdateUserResponseModel> call, Response<RegistrationLoginUpdateUserResponseModel> response) {

                RegistrationLoginUpdateUserResponseModel insertUserResponseModel = response.body();

                /* check the status code */
                if(insertUserResponseModel.getStatus()==1){

                    //        forgotPasswordPageSendEmail_et.setBackgroundColor(getResources().getColor(R.color.colorBlue));
                    forgotPasswordPageSendEmailRegularExpression_tv.setVisibility(View.INVISIBLE);

                    textEmail_forgotPassword = "Բարև Ձեզ, Դուք դիմել եք Ձեր Event Tracker APP էջ մուտք գործելու նպատակով նոր գաղտնաբառ " +
                            "ստանալու համար։ Ձեր էջ մուտք գործելու համար ավտոմատացված գեներացվել է մեկանգամյա օգտագործման նոր գաղտնաբառ։ " +
                            "Եթե այս նամակը ստացել եք պատահմամբ՝ խնդրում եմ անտեսել։" + "\n\n" +  "Գաղտնաբառ՝         " + autogeneratedPassword;
                    SendEmailInBackground sendEmailInBackground = new SendEmailInBackground(UpdateForgotPasswordPage.this, username, autogeneratedPassword, textEmail_forgotPassword);
                    sendEmailInBackground.sendMail();
                    //progressDialog.dismiss();


                    Toast.makeText(UpdateForgotPasswordPage.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();

                    // ImageView imageView_plain = (ImageView) findViewById(R.id.plainSendEmail_iv);
                    // Анимация для восхода солнца
                    //  Animation plainFlyAnimation = AnimationUtils.loadAnimation(UpdateForgotPassword_User.this, R.anim.fly_plain);
                    // Подключаем анимацию к нужному View
                    // imageView_plain.startAnimation(plainFlyAnimation);

                }else{
                    //progressDialog.dismiss();
                    // forgotPasswordPageSendEmail_et.setBackgroundColor(getResources().getColor(R.color.colorRose));
                    //forgotPasswordPageSendEmailRegularExpression_tv.setText(R.string.fotgotPasswordPage_hintTV);

                    Toast.makeText(UpdateForgotPasswordPage.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();
                }
            }
            @Override
            public void onFailure(Call<RegistrationLoginUpdateUserResponseModel> call, Throwable t) {
                Toast.makeText(UpdateForgotPasswordPage.this, t.getMessage(), Toast.LENGTH_SHORT).show();
                //progressDialog.dismiss();
            }
        });
    }

    /*   */
    /*protected void sendMail(String forgotPasswordPageSendEmail, String autogeneratedNewPassword) {

        //autogeneratedNewPassword = getToken(length_forgotPassword);
        final String username = "events_tracker@mail.ru";
        final String password = "ArsSystems8";
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.mail.ru");
        props.put("mail.smtp.port", "587");
        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });
        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(forgotPasswordPageSendEmail + ",events_tracker@mail.ru"));
            message.setSubject( "Իրադարձությունների վերահսկում - ուղարկված է MobileApp-ից");
            message.setText(        //R.string.emailText1_forgotPassword + "\n\n" +  R.string.emailText2_forgotPassword +
                    autogeneratedNewPassword);

            new SendMailTask().execute(message);
        }
        catch (MessagingException mex) {
            mex.printStackTrace();
        }
    }

    *//*   *//*
    private class SendMailTask extends AsyncTask<Message, String, String> {
        private ProgressDialog progressDialog;
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = ProgressDialog.show(UpdateForgotPassword_User.this, null, "Sending mail", true, false);
        }
        @Override
        protected String doInBackground(Message... messages) {
            try {
                Transport.send(messages[0]);
                return "Success";
            } catch (SendFailedException ee) {
                if (progressDialog.isShowing()) {
                    progressDialog.dismiss();
                }
                return "error1";
            } catch (MessagingException e) {
                if (progressDialog.isShowing()) {
                    progressDialog.dismiss();
                }
                return "error2";
            }
        }
        @Override
        protected void onPostExecute(String result) {
            if(result.equals("Success")) {
                super.onPostExecute(result);
                progressDialog.dismiss();
                Toast.makeText(UpdateForgotPassword_User.this, "Mail Sent Successfully", Toast.LENGTH_LONG).show();

                ImageView imageView_plain = (ImageView) findViewById(R.id.plainSendEmail_iv);
                // Анимация для восхода солнца
                Animation plainFlyAnimation = AnimationUtils.loadAnimation(UpdateForgotPassword_User.this, R.anim.fly_plain);
                // Подключаем анимацию к нужному View
                imageView_plain.startAnimation(plainFlyAnimation);
                //finish();*//**//*
            }
            else if(result.equals("error1")) {
                Toast.makeText(UpdateForgotPassword_User.this, "Email Failure", Toast.LENGTH_LONG).show();
            }
            else if(result.equals("error2")) {
                Toast.makeText(UpdateForgotPassword_User.this, "Email Sent problem2", Toast.LENGTH_LONG).show();
            }
        }
    }
*/
    public void checkUsernameInDB(){
        String forgotPasswordPageSendEmail = forgotPasswordPageSendEmail_et.getText().toString();

        ApiServiceCheckUsernameAvailability apiServiceCheckUsernameAvailability = ApiClient.getClient().create(ApiServiceCheckUsernameAvailability.class);
        Call<RegistrationLoginUpdateUserResponseModel> call = apiServiceCheckUsernameAvailability.checkUserData(forgotPasswordPageSendEmail);
        call.enqueue(new Callback<RegistrationLoginUpdateUserResponseModel>() {
            @Override
            public void onResponse(Call<RegistrationLoginUpdateUserResponseModel> call, Response<RegistrationLoginUpdateUserResponseModel> response) {

                RegistrationLoginUpdateUserResponseModel insertUserResponseModel = response.body();

                /* check the status code */
                if(insertUserResponseModel.getStatus()==1){

                    /*String forgotPasswordPageSendEmail = forgotPasswordPageSendEmail_et.getText().toString();
                    String autogeneratedNewPassword = getRandomPassword(length_updateForgotPassword);*/

                    Toast.makeText(UpdateForgotPasswordPage.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();

                   /* changUserData(forgotPasswordPageSendEmail, MD5.md5Custom(autogeneratedNewPassword), autogeneratedNewPassword);*/

                }else{

                    Toast.makeText(UpdateForgotPasswordPage.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();
                }
            }
            @Override
            public void onFailure(Call<RegistrationLoginUpdateUserResponseModel> call, Throwable t) {
                Toast.makeText(UpdateForgotPasswordPage.this, t.getMessage(), Toast.LENGTH_SHORT).show();
                //progressDialog.dismiss();
            }
        });


    }



    /* this function autogenerated a new password to uptade the forgotten password */
    public static String getRandomPassword(int length_forgotPassword) {

        final Random random = new Random();
        final String CHARS = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ234567890!@#$*%&";
        StringBuilder password = new StringBuilder(length_forgotPassword);
        for (int i = 0; i < length_forgotPassword; i++) {
            password.append(CHARS.charAt(random.nextInt(CHARS.length())));
        }
        return password.toString();
    }

    //Regular Expressions for fullname, username, email, password
    public boolean testEmail(String email){
        Pattern patt = Pattern.compile("[^,\\s]+@[^,\\s]+[.][^,\\s]+"); 		//cankacac simvolner baci storaketic, probelic u mechy petq e anpayman lini '@' u heto '.' nshannery hertakanutyamb"^[^,]\\S[^,]{0,}\\@(gmail.com|yahoo.com|mail.ru|yandex.ru|rambler.ru)"	//mail-i anuni simvolnery chen karox linel probel ev ',' ev qanaky chi karox poqr linel 2-ic u verchanum e hmpt verdjavorutyunnerov
        Matcher match = patt.matcher(email);
        boolean b = match.matches();
        return b;
    }



}
